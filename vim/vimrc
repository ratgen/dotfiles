" Install vim-plug if not found
if empty(glob('~/.config/nvim/autoload/plug.vim'))
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
            \| PlugInstall --sync | source $MYVIMRC
            \| endif

call plug#begin('~/.config/nvim/plugged')
    "VimTeX extension for compiling tex documetns 
    Plug 'lervag/vimtex'                                  
    "Surrounding for quoting and parenthesizing
    Plug 'machakann/vim-sandwich'                         
    "Fuzzy search in files systemwide
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }   
    "Fuzzy search in files in vim
    Plug 'junegunn/fzf.vim' 
    "Git commands inside vim
    Plug 'tpope/vim-fugitive'                             
    "Display colors of codes inside .css and .html documents
    Plug 'ap/vim-css-color'                               
    "Bottom line displaying insert and file info
    Plug 'vim-airline/vim-airline'                          
    "Snippets
    Plug 'SirVer/ultisnips'                               
    "Library of snippets for ultisnips
    Plug 'honza/vim-snippets'                             
    "Theme
    Plug 'sainnhe/sonokai'
    "lsp configuration for nvim 
    Plug 'neovim/nvim-lspconfig'
    Plug 'hrsh7th/nvim-cmp'

    " sources for cmp-nvim
    Plug 'quangnguyen30192/cmp-nvim-ultisnips'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-calc'
    Plug 'hrsh7th/cmp-buffer'


    Plug 'posva/vim-vue'
    Plug 'Yggdroot/indentLine'
call plug#end()

let g:vue_pre_processor = ['scss']

"move focus to NERDTreeToggle
nnoremap <leader>n :NERDTreeFocus<CR>   
"launch NERDTree
nnoremap <C-n> :NERDTree<CR>            
"toggle NERDTree
nnoremap <C-t> :NERDTreeToggle<CR>      

"----- Unmap the arrow keys in normal and visual mode
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
imap <Up> <Nop>
imap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

"----- Set the copying and pasting from the system clipboard 
nmap <leader>p "+gp
nmap <leader>y "+y

"---- Set the view of indentation and indentation to 2.
filetype indent on
set tabstop=4       "number of spaces a tab counts for
set shiftwidth=4    "number of space arrows count for 
""set autoindent      "keep indentation when moving to a new line
set smartindent     "do indentation automatically 
set expandtab       "use spaces instead of tabs
set incsearch       "automatically show the first result of a pattern
set hlsearch        "highlight the results of a query.

"----- Interface options
set noshowmode      "Remove vim's own statusbar
set relativenumber  "make numbers relative to current position
set number          "Show numbers
set confirm         "display confirmation when closing unsaved file
set laststatus=2    "always show the statusbar (the one on the bottom)
"set conceallevel=2  "Conceal textbf and strings in tex

"----- Set the color theme
syntax on                               "Syntax highlighting on
set cursorline                          "Highlight the line on which the cursor is
colorscheme sonokai                     "Use the gruvbox theme
let g:sonokai_style="atlantis"
let g:airline_theme='sonokai'           "Use the gruvbox theme for airline

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline_powerline_fonts = 1

"----- Set aliases to improve efficiency
command W w                     
command Wq wq
command WQ wq

"----- Set shortcuts in LaTeX documents
set tw=80          "set textwidth to 80
""autocmd filetype markdown set tw=80
""autocmd filetype text set tw=80

"----- set the placement of the swap files
set backupdir=~/.backup/,/tmp//
set directory=~/.swp/,/tmp//
set undodir=~/.undo/,/tmp//
set updatetime=300                  "Write the swapfile if nothings is written for 300 millisecs

"----- set vimtex options
let g:vimtex_fold_enabled=1

"----- fzf search in file
"Search in buffer names
nnoremap <silent> <Leader>b :Buffers<CR>
"Search in files in directory
nnoremap <silent> <C-f> :Files<CR>
"Grep in files in the directory
nnoremap <silent> <Leader>f :Rg<CR>
"Search in current file
nnoremap <silent> <Leader>/ :BLines<CR>
"Search in marks
nnoremap <silent> <Leader>' :Marks<CR>
"Search in commits
nnoremap <silent> <Leader>c :Commits<CR>
nnoremap <silent> <Leader>H :Helptags<CR>
nnoremap <silent> <Leader>hh :History<CR>
nnoremap <silent> <Leader>h: :History:<CR>
nnoremap <silent> <Leader>h/ :History/<CR>
set grepprg=rg\ --vimgrep\ --smart-case\ --follow

"---- Abbreviations
set spell                       "Enable spellchecking
set spelllang=en_gb             "Set language for spellchecking
set modeline                    "Set options in each file

"-- Choose the first suggestion for mistake
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u    

abbr SE Software Engineering
abbr hte the
abbr nad and

"--- Ultisnips options
let g:UltiSnipsExpandTrigger="<c-space>"        
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"--- Auto expansion
inoremap <nowait> " ""<left>
inoremap <nowait> ' ''<left>
inoremap <nowait> ( ()<left>
inoremap <nowait> [ []<left>
inoremap <nowait> { {}<left>
inoremap <nowait> {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys 
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { "pyright", "rust_analyzer", "tsserver", "vuels" , "texlab", "java_language_server", "jdtls" }

for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup { on_attach = on_attach }
end

require "cmp_buffer"
require "cmp_nvim_lsp"
require "cmp_calc"
require "cmp_path"
require "cmp_nvim_ultisnips"

WIDE_HEIGHT = 300

local cmp = require'cmp'
cmp.setup({
    completion = {
      completeopt = 'menu,menuone,noselect',
      keyword_pattern = [[\%(-\?\d\+\%(\.\d\+\)\?\|\h\w*\%(-\w*\)*\)]],
      keyword_length = 1,
      get_trigger_characters = function(trigger_characters)
        return trigger_characters
      end,
    },

    snippet = {
      expand = function()
        error('snippet engine is not configured.')
      end,
    },

    preselect = cmp.PreselectMode.Item,

    documentation = {
      border = { '', '', '', ' ', '', '', '', ' ' },
      winhighlight = 'NormalFloat:CmpDocumentation,FloatBorder:CmpDocumentationBorder',
      maxwidth = math.floor((WIDE_HEIGHT * 2) * (vim.o.columns / (WIDE_HEIGHT * 2 * 16 / 9))),
      maxheight = math.floor(WIDE_HEIGHT * (WIDE_HEIGHT / vim.o.lines)),
    },

    confirmation = {
      default_behavior = cmp.ConfirmBehavior.Insert,
      get_commit_characters = function(commit_characters)
        return commit_characters
      end,
    },

    event = {},

    mapping = {},

    formatting = {
      deprecated = true,
      format = function(_, vim_item)
        return vim_item
      end,
    },

    experimental = {
      ghost_text = false,
    },

    sources = {
        { name = "path" },
        { name = "buffer" },
        { name = "nvim_lsp" },
        { name = "calc" },
        { name = "nvim_ultisnips" }
    }
})

EOF

"vim set filetype=vim

