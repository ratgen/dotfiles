" Install vim-plug if not found
if empty(glob('~/.config/nvim/autoload/plug.vim'))
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
            \| PlugInstall --sync | source $MYVIMRC
            \| endif

call plug#begin('~/.config/nvim/plugged')
    "VimTeX extension for compiling tex documetns 
    Plug 'lervag/vimtex'                                  

    "Surrounding for quoting and parenthesizing
    Plug 'machakann/vim-sandwich'                         

    "Fuzzy search in files systemwide
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }   

    "Fuzzy search in files in vim
    Plug 'junegunn/fzf.vim' 

    "Git commands inside vim
    Plug 'tpope/vim-fugitive'                             

    "Display colors of codes inside .css and .html documents
    Plug 'ap/vim-css-color'                               

    "Bottom line displaying insert and file info
    Plug 'vim-airline/vim-airline'                          

    "Snippets
    Plug 'SirVer/ultisnips'                               

    "Library of snippets for ultisnips
    Plug 'honza/vim-snippets'                             

    "Theme
    Plug 'NLKNguyen/papercolor-theme'

    "lsp configuration for nvim 
    Plug 'neovim/nvim-lspconfig'
    Plug 'williamboman/nvim-lsp-installer'

    "Autocompletion plugin
    Plug 'hrsh7th/nvim-cmp'
    
    " sources for cmp-nvim
    Plug 'quangnguyen30192/cmp-nvim-ultisnips'
    Plug 'hrsh7th/cmp-nvim-lsp'
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-calc'
    Plug 'hrsh7th/cmp-buffer'

    "Plugin for better syntax highlighting with vue
    Plug 'posva/vim-vue'

    "The bars for each indentation
    Plug 'Yggdroot/indentLine'

    "Expands the targets for 'change inner'
    Plug 'wellle/targets.vim'

    Plug 'yuezk/vim-js'
    Plug 'maxmellon/vim-jsx-pretty'

    "PlantUML Syntax
    Plug 'aklt/plantuml-syntax'
    Plug 'tyru/open-browser.vim'
    Plug 'weirongxu/plantuml-previewer.vim'

    "Autoclosing pairs
    Plug 'windwp/nvim-autopairs'

    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
call plug#end()

nnoremap <C-t> :VimtexTocToggle<CR>      

"----- Unmap the arrow keys in normal and visual mode
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
imap <Up> <Nop>
imap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

"----- Set the copying and pasting from the system clipboard 
nmap <leader>p "+gp
nmap <leader>y "+y

"---- Set the view of indentation and indentation to 2.
filetype indent on
set tabstop=2       "number of spaces a tab counts for
set shiftwidth=2    "number of space arrows count for 
set autoindent      "keep indentation when moving to a new line
set smartindent     "do indentation automatically 
set expandtab       "use spaces instead of tabs
set incsearch       "automatically show the first result of a pattern
set hlsearch        "highlight the results of a query.

autocmd filetype javascript set shiftwidth=2
autocmd filetype javascript set tabstop=2
autocmd filetype typesript set shiftwidth=2
autocmd filetype typesript set tabstop=2
autocmd filetype vue set shiftwidth=2
autocmd filetype vue set tabstop=2

"----- Interface options
set noshowmode      "Remove vim's own statusbar
set relativenumber  "make numbers relative to current position
set number          "Show numbers
set confirm         "display confirmation when closing unsaved file
set laststatus=2    "always show the statusbar (the one on the bottom)

"----- Set the color theme
syntax on                               "Syntax highlighting on
set cursorline                          "Highlight the line on which the cursor is
set background=dark
colorscheme PaperColor                     "Use the gruvbox theme

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline_powerline_fonts = 1

"----- Set aliases to improve efficiency
command W w                     
command Wq wq
command WQ wq

function LectureStart(arg)
  execute '!mkdir -p lecture/' . a:arg
  echo "creating lecture/" . a:arg . '/lecture.tex'
  execute 'e lecture/' . a:arg. '/lecture.tex'
  execute 'normal 5o'
  call append(5,"% vim: spell spelllang=en")
  execute 'normal gg'
  execute 'w'
  execute 'e main.tex'
  execute '/lecture'
  execute 'normal N'
  execute 'normal o' . '\include{./lecture/' . a:arg . '/lecture.tex}'
  execute 'w'
  execute '\ll'
  execute 'tabnew'
  execute 'e lecture/' . a:arg. '/lecture.tex'
endfunction

command -nargs=1 Lecture :call LectureStart(<f-args>)
"----- Set shortcuts in LaTeX documents
set tw=80          "set textwidth to 80
""autocmd filetype markdown set tw=80
""autocmd filetype text set tw=80

"----- set the placement of the swap files
set backupdir=~/.backup/,/tmp//
set directory=~/.swp/,/tmp//
set undodir=~/.undo/,/tmp//
set updatetime=300                  "Write the swapfile if nothings is written for 300 millisecs

"----- set vimtex options
let g:vimtex_fold_enabled=1
let g:vimtex_syntax_conceal_disable=1

"----- fzf search in file
"Search in buffer names
nnoremap <silent> <Leader>b :Buffers<CR>
"Search in files in directory
nnoremap <silent> <C-f> :Files<CR>
"Grep in files in the directory
nnoremap <silent> <Leader>f :Rg<CR>
"Search in current file
nnoremap <silent> <Leader>/ :BLines<CR>
"Search in marks
nnoremap <silent> <Leader>' :Marks<CR>
"Search in commits
nnoremap <silent> <Leader>c :Commits<CR>
nnoremap <silent> <Leader>H :Helptags<CR>
nnoremap <silent> <Leader>hh :History<CR>
nnoremap <silent> <Leader>h: :History:<CR>
nnoremap <silent> <Leader>h/ :History/<CR>
set grepprg=rg\ --vimgrep\ --smart-case\ --follow

"---- Abbreviations
"set spell                       "Enable spellchecking
"set spelllang=en_gb             "Set language for spellchecking
set modeline                    "Set options in each file

"-- Choose the first suggestion for mistake
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

abbr SE Software Engineering
abbr hte the
abbr nad and

"--- Ultisnips options
let g:UltiSnipsExpandTrigger="<c-space>"        
let g:UltiSnipsJumpForwardTrigger="<s-tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

lua << EOF
require("nvim-autopairs").setup {}

require'nvim-treesitter.configs'.setup {
  -- A list of parser names, or "all"
  ensure_installed = { "c", "lua", "rust" },

  -- Install parsers synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- Automatically install missing parsers when entering buffer
  -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
  auto_install = true,

  -- List of parsers to ignore installing (for "all")
  ignore_install = { "javascript" },

  ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
  -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
    -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
    -- the name of the parser)
    -- list of language that will be disabled
    disable = { "c", "rust" },
    -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files
    disable = function(lang, buf)
        local max_filesize = 100 * 1024 -- 100 KB
        local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
        if ok and stats and stats.size > max_filesize then
            return true
        end
    end,

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}

local lsp_installer = require("nvim-lsp-installer")

-- Register a handler that will be called for each installed server when it's ready (i.e. when installation is finished
-- or if the server is already installed).

lsp_installer.on_server_ready(
  function(server)
    local opts = {}

    -- (optional) Customize the options passed to the server
    -- if server.name == "tsserver" then
    --     opts.root_dir = function() ... end
    -- end

    -- This setup() function will take the provided server configuration and decorate it with the necessary properties
    -- before passing it onwards to lspconfig.
    -- Refer to https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md
    server:setup(opts)
    end
) 


local on_attach = function(client, bufnr)
local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

-- Mappings.
local opts = { noremap=true, silent=true }

-- See `:help vim.lsp.*` for documentation on any of the below functions
buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)

end

local t = function(str)
  return vim.api.nvim_replace_termcodes(str, true, true, true)
end

require "cmp_buffer"
require "cmp_nvim_lsp"
require "cmp_calc"
require "cmp_path"
require "cmp_nvim_ultisnips"

WIDE_HEIGHT = 300

local cmp = require'cmp'
cmp.setup({
  completion = {
    completeopt = 'menu,menuone,noselect',
    keyword_pattern = [[\%(-\?\d\+\%(\.\d\+\)\?\|\h\w*\%(-\w*\)*\)]],
    keyword_length = 1,
    get_trigger_characters = function(trigger_characters)
    return trigger_characters
  end,
  },
  snippet = {
      expand = function(args)
      vim.fn["UltiSnips#Anon"](args.body)
  end,
  },
  preselect = cmp.PreselectMode.Item,

  --documentation = {
  --  border = { '', '', '', ' ', '', '', '', ' ' },
  --  winhighlight = 'NormalFloat:CmpDocumentation,FloatBorder:CmpDocumentationBorder',
  --  maxwidth = math.floor((WIDE_HEIGHT * 2) * (vim.o.columns / (WIDE_HEIGHT * 2 * 16 / 9))),
  --  maxheight = math.floor(WIDE_HEIGHT * (WIDE_HEIGHT / vim.o.lines)),
 -- },
  confirmation = {
      default_behavior = cmp.ConfirmBehavior.Insert,
      get_commit_characters = function(commit_characters)
      return commit_characters
    end,
  },
  event = {},
  mapping = {
    ['<Tab>'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 's' }),
    ['<S-Tab>'] = cmp.mapping(cmp.mapping.select_prev_item(), { 'i', 's' }),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm({
      behavior = cmp.ConfirmBehavior.Replace
    }),
    ["<C-Space>"] = cmp.mapping(function(fallback)
      if vim.fn.pumvisible() == 1 then
          if vim.fn["UltiSnips#CanExpandSnippet"]() == 1 then
              return vim.fn.feedkeys(t("<C-R>=UltiSnips#ExpandSnippet()<CR>"))
      end

            vim.fn.feedkeys(t("<C-n>"), "n")
--          elseif check_back_space() then
--             vim.fn.feedkeys(t("<cr>"), "n")
        else
            fallback()
        end
    end, {
        "i",
        "s",
        }),
  },
  formatting = {
      deprecated = true,
      format = function(_, vim_item)
      return vim_item
  end,
  },
  experimental = {
    ghost_text = false,
  },
  sources = {
    { name = "path" },
    { name = "buffer" },
    { name = "nvim_lsp" },
    { name = "calc" },
    { name = "ultisnips" }
    }
  }
)
window = {
  documentation = "native"
}


EOF

"vim set filetype=vim
